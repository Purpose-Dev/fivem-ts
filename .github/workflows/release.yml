name: Auto Release

on:
  push:
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.version_check.outputs.package_version }}
      should_release: ${{ steps.version_check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get current version
        id: current_version
        run: echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest tag
        id: latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          if [ "${{ env.CURRENT_VERSION }}" != "${{ env.LATEST_TAG }}" ]; then
            echo "## Version changed"
            echo "::set-output name=should_release::true"
            echo "::set-output name=package_version::${{ env.CURRENT_VERSION }}"
          else
            echo "## No version change"
            echo "::set-output name=should_release::false"
            echo "::set-output name=package_version::${{ env.CURRENT_VERSION }}"
          fi

  create-release:
    needs: check-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.check-version.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Create .zip archive of dist directory
        run: |
          mkdir -p release-assets
          zip -r release-assets/release-${{ needs.check-version.outputs.package_version }}.zip dist

      - name: Create .tar.gz archive of dist directory
        run: |
          mkdir -p release-assets
          tar -czf release-assets/release-${{ needs.check-version.outputs.package_version }}.tar.gz dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.package_version }}
          release_name: Release v${{ needs.check-version.outputs.package_version }}
          body: |
            ## Changelog
            - Automated release for version ${{ needs.check-version.outputs.package_version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .zip archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/release-${{ needs.check-version.outputs.package_version }}.zip
          asset_name: release-${{ needs.check-version.outputs.package_version }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .tar.gz archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/release-${{ needs.check-version.outputs.package_version }}.tar.gz
          asset_name: release-${{ needs.check-version.outputs.package_version }}.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check tag matches version pattern
        id: check_tag
        run: |
          echo "Tag: ${{ github.ref }}"
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]] &&
              [[ ! "${{ github.ref }}" =~ SNAPSHOT ]] &&
              [[ ! "${{ github.ref }}" =~ EXPERIMENTAL ]]; then
            echo "Tag matches version pattern and is not SNAPSHOT or EXPERIMENTAL"
            echo "match=true" >> $GITHUB_ENV
          else
            echo "Tag does not match or is excluded"
            echo "match=false" >> $GITHUB_ENV
          fi

      - name: Exit job if tag is not valid
        if: env.match == 'false'
        run: |
          echo "Exiting job because the tag is not valid."
          exit 1
        continue-on-error: true

      - name: Setup Node.js
        if: env.match == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        if: env.match == 'true'
        run: npm ci

      - name: Check Lint
        if: env.match == 'true'
        run: npm run lint

      - name: Run tests
        if: env.match == 'true'
        run: npm test
  
  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js with npm registry
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Prepare build
        run: npm run prepare

      - name: Publish package to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Post-build message
        run: echo "-- build completed successfully"
        
