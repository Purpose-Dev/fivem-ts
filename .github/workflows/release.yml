name: Auto Release

on:
  push:
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get current version
        id: current_version
        run: echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest tag
        id: latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          if [ "${{ env.CURRENT_VERSION }}" != "${{ env.LATEST_TAG }}" ]; then
           echo "## Version changed"
           echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          else
           echo "## No version change"
           echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
  
  create-release:
    needs: check-version
    runs-on: ubuntu-latest
    if: env.SHOULD_RELEASE == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .zip archive
        run: |
          git archive --format=zip -o release-${{ env.CURRENT_VERSION }}.zip HEAD
          mkdir -p release-assets
          mv release-${{ env.CURRENT_VERSION }}.zip release-assets/ 

      - name: Create .tar.gz archive
        run: |
          git archive --format=tar.gz -o release-${{ env.CURRENT_VERSION }}.tar.gz HEAD
          mv release-${{ env.CURRENT_VERSION }}.tar.gz release-assets/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          release_name: Release v${{ env.CURRENT_VERSION }}
          body: |
            ## Changelog
            - Automated release for version ${{ env.CURRENT_VERSION }}  
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .zip archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/release-${{ env.CURRENT_VERSION }}.zip
          asset_name: release-${{ env.CURRENT_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload .tar.gz archive
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-assets/release-${{ env.CURRENT_VERSION }}.tar.gz
          asset_name: release-${{ env.CURRENT_VERSION }}.tar.gz
          asset_content_type: application/gzip
